services:
  minio:
    container_name: minio-pg-test
    hostname: minio
    image: minio/minio:${MINIO_VERSION}
    entrypoint: sh
    command: -c 'mkdir -p /data/mlflow && minio server /data --console-address ":9001"'
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:9000/minio/health/live || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    networks:
      - aws_pg_test_nw

  postgres:
    image: "postgres:${POSTGRES_VERSION}"
    container_name: mlflow-aws-postgres-db
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    networks:
      - aws_pg_test_nw

  mlflow:
    container_name: mlflow-aws-pg-test
    build:
      context: .
      dockerfile: Dockerfile
    command: "mlflow server --backend-store-uri=postgresql:// --default-artifact-root=s3://mlflow/ --host=0.0.0.0 --port=8080"
    environment:
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: minioadmin
      AWS_SECRET_ACCESS_KEY: minioadmin
      PGHOST: postgres
      PGPORT: 5432
      PGDATABASE: postgres
      PGUSER: postgres
      PGPASSWORD: postgres
    ports:
      - "8080:8080"
    networks:
      - aws_pg_test_nw
    depends_on:
      minio:
        condition: service_healthy
      postgres:
        condition: service_healthy

networks:
  aws_pg_test_nw:
    driver: bridge
