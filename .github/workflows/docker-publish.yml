name: Build and Publish Mlflow Docker Image


on:
  push:
    branches: [ main ]
    # Publish semver tags as releases.
    tags:
      - '*.*.*'
      - '*.*.*.*'
    paths:
      - '.github/workflows/docker-publish.yml'
      - '.env'
      - 'poetry.lock'
      - 'poetry.toml'
      - 'pyproject.toml'
      - 'Dockerfile'
      - 'mlflowstack/**'
      - 'docker-compose.*.yaml'
      - 'tests/**'
      - 'test-containers/**'

  pull_request:
    branches: [ main ]

  workflow_dispatch:


jobs:
  integrationtest:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: 3.9

      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install library
        run: poetry install --no-interaction

      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
      - name: Run tests
        run: |
          source .venv/bin/activate
          poetry run pytest

  buildtestpush:
    runs-on: ubuntu-latest

    needs: integrationtest

    env:
      IMAGE_NAME: ${{ github.repository }}

    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write
      # To upload sarif files
      security-events: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Install ORAS
        id: install_oras
        uses: oras-project/setup-oras@main

      - name: Install Cosign
        id: install_cosign
        uses: sigstore/cosign-installer@v2.8.1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2.1.0
        with:
          platforms: all

      # Workaround: https://github.com/docker/build-push-action/issues/461
      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      # Login against a Docker Hub registry except on PR
      # https://github.com/docker/login-action
      - name: Login to Docker Hub
        id: docker_hub_login
        if: github.event_name != 'pull_request' && contains(github.ref, 'refs/tags/')
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ github.actor }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Login to GitHub Container Registry
        id: ghcr_login
        if: github.event_name != 'pull_request' && contains(github.ref, 'refs/tags/')
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Login to GitHub Container Registry (ORAS)
        id: oras_ghcr_login
        if: github.event_name != 'pull_request' && contains(github.ref, 'refs/tags/')
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | oras login ghcr.io --username ${{ github.actor }} --password-stdin

      - name: Publish Artifact Hub Manifest
        id: publish_ah_manifest
        if: github.event_name != 'pull_request' && contains(github.ref, 'refs/tags/')
        run: |
          oras push \
            ghcr.io/${{ env.IMAGE_NAME }}:artifacthub.io \
            --config /dev/null:application/vnd.cncf.artifacthub.config.v1+yaml \
            artifacthub-repo.yml:application/vnd.cncf.artifacthub.repository-metadata.layer.v1.yaml

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        if: github.event_name != 'pull_request' && contains(github.ref, 'refs/tags/')
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            docker.io/${{ env.IMAGE_NAME }}
            ghcr.io/${{ env.IMAGE_NAME }}
          flavor: |
            latest=true
          tags: |
            type=ref,event=tag
          labels: |
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/burakince/mlflow/main/README.md
            io.artifacthub.package.maintainers=[{"name":"burakince","email":"burak.ince@linux.org.tr"}]
            io.artifacthub.package.logo-url=https://raw.githubusercontent.com/mlflow/mlflow/master/assets/logo.svg
            io.artifacthub.package.keywords=machine-learning,ai,ml,model-management,mlflow,mlflow-tracking-server,mlflow-docker,mlflow-tracking,mlflow-kube
            io.artifacthub.package.license=MIT
            io.artifacthub.package.alternative-locations=docker.io/${{ env.IMAGE_NAME }}

      # Build Docker image with Buildx and don't push it
      - name: Build Docker image
        id: build-docker-image
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/arm64/v8,linux/amd64
          push: false
          tags: docker.io/${{ env.IMAGE_NAME }}:latest

      - name: Run Snyk to check Docker image for vulnerabilities
        id: docker-image-scan
        continue-on-error: true
        uses: snyk/actions/docker@0.3.0
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          image: docker.io/${{ env.IMAGE_NAME }}:latest
          args: --file=Dockerfile --severity-threshold=medium --sarif-file-output=snyk.sarif

      - name: Upload result to GitHub Code Scanning
        if: hashFiles('snyk.sarif') != ''
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: snyk.sarif

      # Break the pipeline with failure status if security scan failed
      # - name: Check docker image scan status
      #   if: ${{ steps.docker-image-scan.outcome == 'failure' }}
      #   run: exit 1

      # Build again and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        if: github.event_name != 'pull_request' && contains(github.ref, 'refs/tags/')
        id: build-and-push
        uses: docker/build-push-action@v4
        with:
          context: .
          platforms: linux/arm64/v8,linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: github.event_name != 'pull_request' && contains(github.ref, 'refs/tags/')
        env:
          COSIGN_EXPERIMENTAL: "true"
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: |
          cosign sign docker.io/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}
          cosign sign ghcr.io/${{ env.IMAGE_NAME }}@${{ steps.build-and-push.outputs.digest }}
